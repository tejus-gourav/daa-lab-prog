#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void swap(char **a, char **b) {
    char *temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function for quick sort
int partition(char **names, int low, int high) {
    char *pivot = names[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (strcmp(names[j], pivot) < 0) {
            i++;
            swap(&names[i], &names[j]);
        }
    }
    swap(&names[i + 1], &names[high]);
    return (i + 1);
}

// Quick sort algorithm
void quickSort(char **names, int low, int high) {
    if (low < high) {
        int pi = partition(names, low, high);

        quickSort(names, low, pi - 1);
        quickSort(names, pi + 1, high);
    }
}

int main() {
    int numNames;
    printf("Enter the number of names: ");
    scanf("%d", &numNames);
    getchar();  // Clear newline from buffer

    char **names = (char **)malloc(numNames * sizeof(char *));

    printf("Enter the names:\n");
    for (int i = 0; i < numNames; i++) {
        char buffer[100];
        fgets(buffer, sizeof(buffer), stdin);
        buffer[strcspn(buffer, "\n")] = '\0';  
        names[i] = strdup(buffer);
    }

    quickSort(names, 0, numNames - 1);

    printf("\nSorted names:\n");
    for (int i = 0; i < numNames; i++) {
        printf("%s\n", names[i]);
    }

    // Free allocated memory
    for (int i = 0; i < numNames; i++) {
        free(names[i]);
    }
    free(names);

    return 0;
}
