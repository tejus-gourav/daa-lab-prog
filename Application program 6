#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_LOCATIONS 100

// Structure to represent a location
struct Location {
    int x, y;
};

// Function to find the vertex with the minimum key value
int findMinKey(int keys[], bool inMST[], int locations) {
    int minKey = INT_MAX;
    int minIndex = -1;

    for (int v = 0; v < locations; ++v) {
        if (!inMST[v] && keys[v] < minKey) {
            minKey = keys[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Function to print the MST
void printMST(int parent[], int locations, struct Location locationList[]) {
    printf("Minimum Spanning Tree:\n");
    for (int i = 1; i < locations; ++i) {
        printf("Location %d - Location %d\n", parent[i], i);
    }
}

// Function to construct and print MST using Prim's algorithm
void primMST(int locations, struct Location locationList[]) {
    int parent[MAX_LOCATIONS];  // To store the constructed MST
    int keys[MAX_LOCATIONS];    // Key values used to pick minimum weight edge
    bool inMST[MAX_LOCATIONS];  // To represent whether a vertex is included in MST

    for (int i = 0; i < locations; ++i) {
        keys[i] = INT_MAX;
        inMST[i] = false;
    }

    keys[0] = 0;      // Start from the first location
    parent[0] = -1;   // First location is the root of MST

    for (int count = 0; count < locations - 1; ++count) {
        int u = findMinKey(keys, inMST, locations);
        inMST[u] = true;

        // Update key values and parent index of adjacent locations
        for (int v = 0; v < locations; ++v) {
            int cost = (locationList[u].x - locationList[v].x) * (locationList[u].x - locationList[v].x) +
                       (locationList[u].y - locationList[v].y) * (locationList[u].y - locationList[v].y);
            if (!inMST[v] && cost < keys[v]) {
                parent[v] = u;
                keys[v] = cost;
            }
        }
    }

    printMST(parent, locations, locationList);
}

int main() {
    int locations;
    printf("Enter the number of locations: ");
    scanf("%d", &locations);

    struct Location locationList[MAX_LOCATIONS];
    printf("Enter the coordinates of the locations:\n");
    for (int i = 0; i < locations; ++i) {
        scanf("%d %d", &locationList[i].x, &locationList[i].y);
    }

    primMST(locations, locationList);

    return 0;
}
